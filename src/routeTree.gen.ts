/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LangRouteImport } from './routes/$lang'
import { Route as SplatRouteImport } from './routes/$'
import { Route as LangIndexRouteImport } from './routes/$lang/index'
import { Route as LangFaqRouteImport } from './routes/$lang/faq'
import { Route as LangAboutRouteImport } from './routes/$lang/about'
import { Route as LangTrackTrackIdRouteImport } from './routes/$lang/track.$trackId'

const LangRoute = LangRouteImport.update({
  id: '/$lang',
  path: '/$lang',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const LangIndexRoute = LangIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LangRoute,
} as any)
const LangFaqRoute = LangFaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => LangRoute,
} as any)
const LangAboutRoute = LangAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => LangRoute,
} as any)
const LangTrackTrackIdRoute = LangTrackTrackIdRouteImport.update({
  id: '/track/$trackId',
  path: '/track/$trackId',
  getParentRoute: () => LangRoute,
} as any)

export interface FileRoutesByFullPath {
  '/$': typeof SplatRoute
  '/$lang': typeof LangRouteWithChildren
  '/$lang/about': typeof LangAboutRoute
  '/$lang/faq': typeof LangFaqRoute
  '/$lang/': typeof LangIndexRoute
  '/$lang/track/$trackId': typeof LangTrackTrackIdRoute
}
export interface FileRoutesByTo {
  '/$': typeof SplatRoute
  '/$lang/about': typeof LangAboutRoute
  '/$lang/faq': typeof LangFaqRoute
  '/$lang': typeof LangIndexRoute
  '/$lang/track/$trackId': typeof LangTrackTrackIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/$': typeof SplatRoute
  '/$lang': typeof LangRouteWithChildren
  '/$lang/about': typeof LangAboutRoute
  '/$lang/faq': typeof LangFaqRoute
  '/$lang/': typeof LangIndexRoute
  '/$lang/track/$trackId': typeof LangTrackTrackIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$'
    | '/$lang'
    | '/$lang/about'
    | '/$lang/faq'
    | '/$lang/'
    | '/$lang/track/$trackId'
  fileRoutesByTo: FileRoutesByTo
  to: '/$' | '/$lang/about' | '/$lang/faq' | '/$lang' | '/$lang/track/$trackId'
  id:
    | '__root__'
    | '/$'
    | '/$lang'
    | '/$lang/about'
    | '/$lang/faq'
    | '/$lang/'
    | '/$lang/track/$trackId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  SplatRoute: typeof SplatRoute
  LangRoute: typeof LangRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$lang': {
      id: '/$lang'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$lang/': {
      id: '/$lang/'
      path: '/'
      fullPath: '/$lang/'
      preLoaderRoute: typeof LangIndexRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/faq': {
      id: '/$lang/faq'
      path: '/faq'
      fullPath: '/$lang/faq'
      preLoaderRoute: typeof LangFaqRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/about': {
      id: '/$lang/about'
      path: '/about'
      fullPath: '/$lang/about'
      preLoaderRoute: typeof LangAboutRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/track/$trackId': {
      id: '/$lang/track/$trackId'
      path: '/track/$trackId'
      fullPath: '/$lang/track/$trackId'
      preLoaderRoute: typeof LangTrackTrackIdRouteImport
      parentRoute: typeof LangRoute
    }
  }
}

interface LangRouteChildren {
  LangAboutRoute: typeof LangAboutRoute
  LangFaqRoute: typeof LangFaqRoute
  LangIndexRoute: typeof LangIndexRoute
  LangTrackTrackIdRoute: typeof LangTrackTrackIdRoute
}

const LangRouteChildren: LangRouteChildren = {
  LangAboutRoute: LangAboutRoute,
  LangFaqRoute: LangFaqRoute,
  LangIndexRoute: LangIndexRoute,
  LangTrackTrackIdRoute: LangTrackTrackIdRoute,
}

const LangRouteWithChildren = LangRoute._addFileChildren(LangRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  SplatRoute: SplatRoute,
  LangRoute: LangRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
