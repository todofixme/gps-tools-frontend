/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FaqIndexRouteImport } from './routes/faq/index'
import { Route as AboutIndexRouteImport } from './routes/about/index'
import { Route as rootIndexRouteImport } from './routes/(root)/index'
import { Route as TrackTrackIdRouteImport } from './routes/track/$trackId'

const FaqIndexRoute = FaqIndexRouteImport.update({
  id: '/faq/',
  path: '/faq/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutIndexRoute = AboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any)
const rootIndexRoute = rootIndexRouteImport.update({
  id: '/(root)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TrackTrackIdRoute = TrackTrackIdRouteImport.update({
  id: '/track/$trackId',
  path: '/track/$trackId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/track/$trackId': typeof TrackTrackIdRoute
  '/': typeof rootIndexRoute
  '/about': typeof AboutIndexRoute
  '/faq': typeof FaqIndexRoute
}
export interface FileRoutesByTo {
  '/track/$trackId': typeof TrackTrackIdRoute
  '/': typeof rootIndexRoute
  '/about': typeof AboutIndexRoute
  '/faq': typeof FaqIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/track/$trackId': typeof TrackTrackIdRoute
  '/(root)/': typeof rootIndexRoute
  '/about/': typeof AboutIndexRoute
  '/faq/': typeof FaqIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/track/$trackId' | '/' | '/about' | '/faq'
  fileRoutesByTo: FileRoutesByTo
  to: '/track/$trackId' | '/' | '/about' | '/faq'
  id: '__root__' | '/track/$trackId' | '/(root)/' | '/about/' | '/faq/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  TrackTrackIdRoute: typeof TrackTrackIdRoute
  rootIndexRoute: typeof rootIndexRoute
  AboutIndexRoute: typeof AboutIndexRoute
  FaqIndexRoute: typeof FaqIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/faq/': {
      id: '/faq/'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(root)/': {
      id: '/(root)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof rootIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/track/$trackId': {
      id: '/track/$trackId'
      path: '/track/$trackId'
      fullPath: '/track/$trackId'
      preLoaderRoute: typeof TrackTrackIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  TrackTrackIdRoute: TrackTrackIdRoute,
  rootIndexRoute: rootIndexRoute,
  AboutIndexRoute: AboutIndexRoute,
  FaqIndexRoute: FaqIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
